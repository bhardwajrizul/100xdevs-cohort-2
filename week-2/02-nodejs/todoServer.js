/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

// Run the app locally using `npm run todoServer` command in terminal
// Uncomment the app.listen() code when running locally
const fs = require('fs');
const uuid = require('uuid');
const express = require('express');
const bodyParser = require('body-parser');

const app = express();

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// read todos from a file on server start
const TODOS_FILE = 'todos.json';

let todos = [];
try {
  const todosData = fs.readFileSync(TODOS_FILE);
  todos = JSON.parse(todosData);
} catch (error) {
  console.error('Error reading todos file:', error);
}

app.get('/todos', (req, res) => {
  res.status(200).json(todos);
});

app.get('/todos/:id', (req, res) => {
  const todo = todos.find((todo) => todo.id === req.params.id);
  if (todo) {
    res.status(200).json(todo);
  } else {
    res.status(404).json({ error: 'Todo not found' });
  }
});

app.post('/todos', (req, res) => {
  const todo = req.body;
  todo.id = uuid.v4();
  todo.completed = todo.completed || false; // Default to false if not defined

  todos.push(todo);
  saveTodosToFile();

  res.status(201).json({ id: todo.id });
});

app.put('/todos/:id', (req, res) => {
  const todo = todos.find((todo) => todo.id === req.params.id);
  if (todo) {
    todo.title = req.body.title;
    todo.description = req.body.description;
    todo.completed = req.body.completed || false; // default false

    saveTodosToFile();

    res.status(200).json(todo);
  } else {
    res.status(404).json({ error: 'Todo not found' });
  }
});

app.delete('/todos/:id', (req, res) => {
  const todoIndex = todos.findIndex((todo) => todo.id === req.params.id);
  if (todoIndex !== -1) {
    todos.splice(todoIndex, 1);
    saveTodosToFile();

    res.status(200).json({ message: 'Deleted' });
  } else {
    res.status(404).json({ error: 'Todo not found' });
  }
});

app.all('*', (req, res) => {
  res.status(404).json({ error: 'Route not found' });
});

// When running locally uncomment the below code, when testing keep it commented
/* 
  app.listen(3001, () => {
   console.log('Server started on port 3001');
  });
*/
function saveTodosToFile() {
  try {
    fs.writeFileSync(TODOS_FILE, JSON.stringify(todos, null, 2));
  } catch (error) {
    console.error(error);
  }
}

module.exports = app;